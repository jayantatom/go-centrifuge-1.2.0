{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Centrifuge OS Node API",
        "title": "Centrifuge OS Node API",
        "contact": {
            "name": "Centrifuge",
            "url": "https://github.com/centrifuge/go-centrifuge",
            "email": "hello@centrifuge.io"
        },
        "license": {
            "name": "MIT"
        },
        "version": "2.0.0"
    },
    "host": "localhost:8082",
    "basePath": "/",
    "paths": {
        "/ping": {
            "get": {
                "description": "returns node version and network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check for Node",
                "operationId": "ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/health.Pong"
                        }
                    }
                }
            }
        },
        "/v1/accounts": {
            "get": {
                "description": "Returns all the accounts in the node.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Returns all the accounts in the node.",
                "operationId": "get_accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.Accounts"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new account without any default configurations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Creates a new account without any default configurations.",
                "operationId": "create_account",
                "parameters": [
                    {
                        "description": "Account Create request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/accounts/generate": {
            "post": {
                "description": "Generates a new account with defaults.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Generates a new account with defaults.",
                "operationId": "generate_account",
                "parameters": [
                    {
                        "description": "Generate Account Payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.GenerateAccountPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/accounts/{account_id}": {
            "get": {
                "description": "Returns the account associated with accountID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Returns the account associated with accountID.",
                "operationId": "get_account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Updates an existing account.",
                "operationId": "update_account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Account Update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/accounts/{account_id}/sign": {
            "post": {
                "description": "Signs and returns the signature of the Payload.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Signs and returns the signature of the Payload.",
                "operationId": "account_sign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.SignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.SignResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents": {
            "post": {
                "description": "Creates a new document and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Creates a new document and anchors it.",
                "operationId": "create_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Document Create request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.CreateDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}": {
            "get": {
                "description": "Returns the latest version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the latest version of the document.",
                "operationId": "get_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing document and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Updates an existing document and anchors it.",
                "operationId": "update_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Document Update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.CreateDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/funding_agreements": {
            "get": {
                "description": "Returns all the funding agreements in the document associated with document_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Agreements"
                ],
                "summary": "Returns all the funding agreements in the document associated with document_id.",
                "operationId": "get_funding_agreements",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new funding agreement on the document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Agreements"
                ],
                "summary": "Creates a new funding agreement on the document.",
                "operationId": "create_funding_agreement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Funding agreement Create Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/funding_agreements/{agreement_id}": {
            "get": {
                "description": "Returns the funding agreement associated with agreement_id in the document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Agreements"
                ],
                "summary": "Returns the funding agreement associated with agreement_id in the document.",
                "operationId": "get_funding_agreement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Funding agreement Identifier",
                        "name": "agreement_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the funding agreement associated with agreement_id in the document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Agreements"
                ],
                "summary": "Updates the funding agreement associated with agreement_id in the document.",
                "operationId": "update_funding_agreement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Funding agreement Identifier",
                        "name": "agreement_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Funding Agreement Update Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/funding_agreements/{agreement_id}/sign": {
            "post": {
                "description": "Signs the funding agreement associated with agreement_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Agreements"
                ],
                "summary": "Signs the funding agreement associated with agreement_id.",
                "operationId": "sign_funding_agreement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Funding agreement Identifier",
                        "name": "agreement_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/proofs": {
            "post": {
                "description": "Generates proofs for the fields from latest version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Generates proofs for the fields from latest version of the document.",
                "operationId": "generate_document_proofs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Document proof request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.ProofsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.ProofsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/transfer_details": {
            "get": {
                "description": "Returns a list of the latest versions of all transfer details on the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer Details"
                ],
                "summary": "Returns a list of the latest versions of all transfer details on the document.",
                "operationId": "list_transfer_details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.TransferDetailListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new transfer detail extension on a document and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer Details"
                ],
                "summary": "Creates a new transfer detail extension on a document and anchors it.",
                "operationId": "create_transfer_detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Transfer Detail Create Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.CreateTransferDetailRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.TransferDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/transfer_details/{transfer_id}": {
            "get": {
                "description": "Returns the latest version of the transfer detail.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer Details"
                ],
                "summary": "Returns the latest version of the transfer detail.",
                "operationId": "get_transfer_detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transfer Detail Identifier",
                        "name": "transfer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.TransferDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a new transfer detail extension on a document and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfer Details"
                ],
                "summary": "Updates a new transfer detail extension on a document and anchors it.",
                "operationId": "update_transfer_detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Transfer Detail Update Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.UpdateTransferDetailRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transfer Detail Identifier",
                        "name": "transfer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.TransferDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/versions/{version_id}": {
            "get": {
                "description": "Returns the specific version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the specific version of the document.",
                "operationId": "get_document_version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Version Identifier",
                        "name": "version_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/versions/{version_id}/funding_agreements": {
            "get": {
                "description": "Returns all the funding agreements from a specific version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Agreements"
                ],
                "summary": "Returns all the funding agreements from a specific version of the document.",
                "operationId": "get_funding_agreements_version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Version Identifier",
                        "name": "version_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/versions/{version_id}/funding_agreements/{agreement_id}": {
            "get": {
                "description": "Returns the funding agreement from a specific version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Agreements"
                ],
                "summary": "Returns the funding agreement from a specific version of the document.",
                "operationId": "get_funding_agreement_version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Version Identifier",
                        "name": "version_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Funding agreement Identifier",
                        "name": "agreement_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.FundingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/versions/{version_id}/proofs": {
            "post": {
                "description": "Generates proofs for the fields from a specific document version.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Generates proofs for the fields from a specific document version.",
                "operationId": "generate_document_version_proofs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Version Identifier",
                        "name": "version_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Document proof request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.ProofsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.ProofsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/entities": {
            "post": {
                "description": "Creates a new Entity and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Creates a new Entity and anchors it.",
                "operationId": "create_entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Entity Create request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.CreateEntityRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.EntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/entities/{document_id}": {
            "get": {
                "description": "Returns the latest version of the Entity.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Returns the latest version of the Entity.",
                "operationId": "get_entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.EntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing Entity and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Updates an existing Entity and anchors it.",
                "operationId": "update_entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Entity Create request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.CreateEntityRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.EntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/entities/{document_id}/revoke": {
            "post": {
                "description": "Revoke revokes target id's access to entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Revoke revokes target id's access to entity.",
                "operationId": "revoke_entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Entity Revoke request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.ShareEntityRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.ShareEntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/entities/{document_id}/share": {
            "post": {
                "description": "Share gives entity access to target identity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Share gives entity access to target identity.",
                "operationId": "share_entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Entity Share request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userapi.ShareEntityRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/userapi.ShareEntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/jobs/{job_id}": {
            "get": {
                "description": "Returns the status of a given Job.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Returns the status of a given Job.",
                "operationId": "get_job_status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jobs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/nfts/registries/{registry_address}/mint": {
            "post": {
                "description": "Mints an NFT against a document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFTs"
                ],
                "summary": "Mints an NFT against a document.",
                "operationId": "mint_nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT registry address in hex",
                        "name": "registry_address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Mint NFT request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.MintNFTRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/coreapi.MintNFTResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/nfts/registries/{registry_address}/tokens/{token_id}/owner": {
            "get": {
                "description": "Returns the Owner of the given NFT.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFTs"
                ],
                "summary": "Returns the Owner of the given NFT.",
                "operationId": "owner_of_nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT token ID in hex",
                        "name": "token_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Registry address in hex",
                        "name": "registry_address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.NFTOwnerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/nfts/registries/{registry_address}/tokens/{token_id}/transfer": {
            "post": {
                "description": "Transfers given NFT to provide address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFTs"
                ],
                "summary": "Transfers given NFT to provide address.",
                "operationId": "transfer_nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT registry address in hex",
                        "name": "registry_address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT token ID in hex",
                        "name": "token_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Mint NFT request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coreapi.TransferNFTRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.TransferNFTResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/relationships/{document_id}/entity": {
            "get": {
                "description": "Returns the latest version of the Entity through relationship ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entities"
                ],
                "summary": "Returns the latest version of the Entity through relationship ID.",
                "operationId": "get_entity_through_relationship_id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Entity Relationship Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userapi.EntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents": {
            "post": {
                "description": "Creates a new document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Creates a new document.",
                "operationId": "create_document_v2",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Document Create request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.CreateDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}": {
            "patch": {
                "description": "Updates a pending document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Updates a pending document.",
                "operationId": "update_document_v2",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Document Update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.UpdateDocumentRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/clone": {
            "post": {
                "description": "Creates a new cloned document from an existing Template document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Creates a new cloned document from an existing Template document.",
                "operationId": "clone_document_v2",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Document Clone request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.CloneDocumentRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/collaborators": {
            "delete": {
                "description": "Removes the collaborators from the document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Removes the collaborators from the document.",
                "operationId": "remove_collaborators",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Remove Collaborators request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.RemoveCollaboratorsRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/commit": {
            "post": {
                "description": "Commits a pending document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Commits a pending document.",
                "operationId": "commit_document_v2",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/committed": {
            "get": {
                "description": "Returns the latest committed document associated with docID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the latest committed document associated with docID.",
                "operationId": "get_committed_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/pending": {
            "get": {
                "description": "Returns the pending document associated with docID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the pending document associated with docID.",
                "operationId": "get_pending_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/push_to_oracle": {
            "post": {
                "description": "Pushes a given attribute value to oracle.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFTs"
                ],
                "summary": "Pushes a given attribute value to oracle.",
                "operationId": "push_attribute_oracle",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Push Attribute to Oracle Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/oracle.PushAttributeToOracleRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/oracle.PushToOracleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/roles": {
            "post": {
                "description": "Adds a new role to the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Adds a new role to the document.",
                "operationId": "add_role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add Role Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.AddRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/roles/{role_id}": {
            "get": {
                "description": "Returns the role associated with the role ID in the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the role associated with the role ID in the document.",
                "operationId": "get_role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing role on the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Updates an existing role on the document.",
                "operationId": "update_role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Role Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.UpdateRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.Role"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/signed_attribute": {
            "post": {
                "description": "Signs the given payload and add it the pending document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Signs the given payload and add it the pending document.",
                "operationId": "add_signed_attribute",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Signed Attribute request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.SignedAttributeRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/transition_rules": {
            "post": {
                "description": "Adds a new transition rules to the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Adds a transition new rules to the document.",
                "operationId": "add_transition_rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add Transition rules Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pending.AddTransitionRules"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.TransitionRules"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/transition_rules/{rule_id}": {
            "get": {
                "description": "Returns the rule associated with the ruleID in the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the rule associated with the ruleID in the document.",
                "operationId": "get_transition_rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transition rule ID",
                        "name": "rule_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.TransitionRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the transition rule associated with ruleID from the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Deletes the transition rule associated with ruleID from the document.",
                "operationId": "delete_transition_rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transition rule ID",
                        "name": "rule_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v2/documents/{document_id}/versions/{version_id}": {
            "get": {
                "description": "Returns the specific version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the specific version of the document.",
                "operationId": "get_document_version_v2",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Version Identifier",
                        "name": "version_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/webhook": {
            "post": {
                "description": "Webhook is a place holder to describe webhook response in swagger.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Webhook is a place holder to describe webhook response in swagger.",
                "operationId": "webhook",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/notification.Message"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "byteutils.HexBytes": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        },
        "byteutils.OptionalHex": {
            "type": "object",
            "properties": {
                "HexBytes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "config.CentChainAccount": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "ss_58_address": {
                    "type": "string"
                }
            }
        },
        "coreapi.Account": {
            "type": "object",
            "properties": {
                "centrifuge_chain_account": {
                    "type": "object",
                    "$ref": "#/definitions/config.CentChainAccount"
                },
                "eth_account": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.EthAccount"
                },
                "eth_default_account_name": {
                    "type": "string"
                },
                "identity_id": {
                    "type": "string"
                },
                "p2p_key_pair": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.KeyPair"
                },
                "receive_event_notification_endpoint": {
                    "type": "string"
                },
                "signing_key_pair": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.KeyPair"
                }
            }
        },
        "coreapi.Accounts": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/coreapi.Account"
                    }
                }
            }
        },
        "coreapi.AttributeMapRequest": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/coreapi.AttributeRequest"
            }
        },
        "coreapi.AttributeMapResponse": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/coreapi.AttributeResponse"
            }
        },
        "coreapi.AttributeRequest": {
            "type": "object",
            "properties": {
                "monetary_value": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.MonetaryValue"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "integer",
                        "decimal",
                        "string",
                        "bytes",
                        "timestamp",
                        "monetary"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "coreapi.AttributeResponse": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "monetary_value": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.MonetaryValue"
                },
                "signed_value": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.SignedValue"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "integer",
                        "decimal",
                        "string",
                        "bytes",
                        "timestamp",
                        "monetary"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "coreapi.CreateDocumentRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMapRequest"
                },
                "data": {
                    "type": "object"
                },
                "read_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scheme": {
                    "type": "string",
                    "enum": [
                        "generic",
                        "entity"
                    ]
                },
                "write_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.DocumentResponse": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMapResponse"
                },
                "data": {
                    "type": "object"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                },
                "scheme": {
                    "type": "string",
                    "enum": [
                        "generic",
                        "entity"
                    ]
                }
            }
        },
        "coreapi.EthAccount": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "coreapi.GenerateAccountPayload": {
            "type": "object",
            "properties": {
                "centrifuge_chain_account": {
                    "type": "object",
                    "$ref": "#/definitions/config.CentChainAccount"
                }
            }
        },
        "coreapi.KeyPair": {
            "type": "object",
            "properties": {
                "pub": {
                    "type": "string"
                },
                "pvt": {
                    "type": "string"
                }
            }
        },
        "coreapi.MintNFTRequest": {
            "type": "object",
            "properties": {
                "asset_manager_address": {
                    "type": "string"
                },
                "deposit_address": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "proof_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.MintNFTResponse": {
            "type": "object",
            "properties": {
                "deposit_address": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.NFTResponseHeader"
                },
                "registry_address": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.MonetaryValue": {
            "type": "object",
            "properties": {
                "chain_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "coreapi.NFT": {
            "type": "object",
            "properties": {
                "owner": {
                    "type": "string"
                },
                "registry": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                },
                "token_index": {
                    "type": "string"
                }
            }
        },
        "coreapi.NFTOwnerResponse": {
            "type": "object",
            "properties": {
                "owner": {
                    "type": "string"
                },
                "registry_address": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.NFTResponseHeader": {
            "type": "object",
            "properties": {
                "job_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.ProofResponseHeader": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "version_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.ProofsRequest": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.ProofsResponse": {
            "type": "object",
            "properties": {
                "field_proofs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/documents.Proof"
                    }
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ProofResponseHeader"
                }
            }
        },
        "coreapi.ResponseHeader": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "job_id": {
                    "type": "string"
                },
                "nfts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/coreapi.NFT"
                    }
                },
                "read_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "version_id": {
                    "type": "string"
                },
                "write_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.SignRequest": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "string"
                }
            }
        },
        "coreapi.SignResponse": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signer_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.SignedValue": {
            "type": "object",
            "properties": {
                "identity": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "coreapi.TransferNFTRequest": {
            "type": "object",
            "properties": {
                "to": {
                    "type": "string"
                }
            }
        },
        "coreapi.TransferNFTResponse": {
            "type": "object",
            "properties": {
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.NFTResponseHeader"
                },
                "registry_address": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "documents.AttrKey": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        },
        "documents.Proof": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "salt": {
                    "type": "string"
                },
                "sorted_hashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "entity.Address": {
            "type": "object",
            "properties": {
                "address_line_1": {
                    "type": "string"
                },
                "address_line_2": {
                    "type": "string"
                },
                "contact_person": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "is_main": {
                    "type": "boolean"
                },
                "is_pay_to": {
                    "type": "boolean"
                },
                "is_remit_to": {
                    "type": "boolean"
                },
                "is_ship_to": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "entity.BankPaymentMethod": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "object",
                    "$ref": "#/definitions/entity.Address"
                },
                "bank_account_number": {
                    "type": "string"
                },
                "bank_key": {
                    "type": "string"
                },
                "holder_name": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string"
                },
                "supported_currency": {
                    "type": "string"
                }
            }
        },
        "entity.Contact": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "entity.CryptoPaymentMethod": {
            "type": "object",
            "properties": {
                "chain_uri": {
                    "type": "string"
                },
                "identifier": {
                    "type": "string"
                },
                "supported_currency": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "entity.Data": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Address"
                    }
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Contact"
                    }
                },
                "identity": {
                    "type": "string"
                },
                "legal_name": {
                    "type": "string"
                },
                "payment_details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PaymentDetail"
                    }
                }
            }
        },
        "entity.OtherPaymentMethod": {
            "type": "object",
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "pay_to": {
                    "type": "string"
                },
                "supported_currency": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entity.PaymentDetail": {
            "type": "object",
            "properties": {
                "bank_payment_method": {
                    "type": "object",
                    "$ref": "#/definitions/entity.BankPaymentMethod"
                },
                "crypto_payment_method": {
                    "type": "object",
                    "$ref": "#/definitions/entity.CryptoPaymentMethod"
                },
                "other_payment_method": {
                    "type": "object",
                    "$ref": "#/definitions/entity.OtherPaymentMethod"
                },
                "predefined": {
                    "type": "boolean"
                }
            }
        },
        "funding.Data": {
            "type": "object",
            "properties": {
                "agreement_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                },
                "apr": {
                    "type": "string"
                },
                "borrower_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "days": {
                    "type": "string"
                },
                "fee": {
                    "type": "string"
                },
                "funder_id": {
                    "type": "string"
                },
                "nft_address": {
                    "type": "string"
                },
                "payment_details_id": {
                    "type": "string"
                },
                "repayment_amount": {
                    "type": "string"
                },
                "repayment_due_date": {
                    "type": "string"
                },
                "repayment_occurred_date": {
                    "type": "string"
                }
            }
        },
        "funding.Signature": {
            "type": "object",
            "properties": {
                "identity": {
                    "type": "string"
                },
                "outdated_signature": {
                    "type": "string"
                },
                "signed_version": {
                    "type": "string"
                },
                "valid": {
                    "type": "string"
                }
            }
        },
        "health.Pong": {
            "type": "object",
            "properties": {
                "network": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "httputils.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "identity.DID": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        },
        "jobs.StatusResponse": {
            "type": "object",
            "properties": {
                "job_id": {
                    "type": "string"
                },
                "last_updated": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "nft.TokenID": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        },
        "notification.Message": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "account_id is the account associated to webhook",
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "document_type": {
                    "type": "string"
                },
                "event_type": {
                    "type": "integer"
                },
                "from_id": {
                    "description": "from_id if provided, original trigger of the event",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "recorded": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "to_id": {
                    "description": "to_id if provided, final destination of the event",
                    "type": "string"
                }
            }
        },
        "oracle.PushAttributeToOracleRequest": {
            "type": "object",
            "properties": {
                "attribute_key": {
                    "description": "hex value of the Attribute key",
                    "type": "string"
                },
                "oracle_address": {
                    "description": "hex value of the Oracle address",
                    "type": "string"
                },
                "token_id": {
                    "description": "hex value of the NFT token",
                    "type": "string"
                }
            }
        },
        "oracle.PushToOracleResponse": {
            "type": "object",
            "properties": {
                "attribute_key": {
                    "description": "hex value of the Attribute key",
                    "type": "string"
                },
                "job_id": {
                    "type": "string"
                },
                "oracle_address": {
                    "description": "hex value of the Oracle address",
                    "type": "string"
                },
                "token_id": {
                    "description": "hex value of the NFT token",
                    "type": "string"
                }
            }
        },
        "pending.AddTransitionRules": {
            "type": "object",
            "properties": {
                "attribute_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pending.AttributeRule"
                    }
                },
                "compute_fields_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pending.ComputeFieldsRule"
                    }
                }
            }
        },
        "pending.AttributeRule": {
            "type": "object",
            "properties": {
                "key_label": {
                    "description": "attribute key label",
                    "type": "string"
                },
                "role_id": {
                    "description": "roleID is 32 byte role ID in hex. RoleID should already be part of the document.",
                    "type": "string"
                }
            }
        },
        "pending.ComputeFieldsRule": {
            "type": "object",
            "properties": {
                "attribute_labels": {
                    "description": "AttributeLabels that are passed to the WASM for execution",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "target_attribute_label": {
                    "description": "TargetAttributeLabel is the label of the attribute which holds the result from the executed WASM.\nThis attribute is automatically added and updated everytime document is updated.",
                    "type": "string"
                },
                "wasm": {
                    "type": "string"
                }
            }
        },
        "transferdetails.Data": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "recipient_id": {
                    "type": "string"
                },
                "scheduled_date": {
                    "type": "string"
                },
                "sender_id": {
                    "type": "string"
                },
                "settlement_date": {
                    "type": "string"
                },
                "settlement_reference": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transfer_id": {
                    "type": "string"
                },
                "transfer_type": {
                    "type": "string"
                }
            }
        },
        "userapi.CreateEntityRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMapRequest"
                },
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/entity.Data"
                },
                "read_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "write_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "userapi.CreateTransferDetailRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/transferdetails.Data"
                },
                "document_id": {
                    "type": "string"
                }
            }
        },
        "userapi.EntityDataResponse": {
            "type": "object",
            "properties": {
                "entity": {
                    "type": "object",
                    "$ref": "#/definitions/entity.Data"
                },
                "relationships": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userapi.Relationship"
                    }
                }
            }
        },
        "userapi.EntityResponse": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMapResponse"
                },
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/userapi.EntityDataResponse"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                }
            }
        },
        "userapi.FundingDataResponse": {
            "type": "object",
            "properties": {
                "funding": {
                    "type": "object",
                    "$ref": "#/definitions/funding.Data"
                },
                "signatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/funding.Signature"
                    }
                }
            }
        },
        "userapi.FundingListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userapi.FundingDataResponse"
                    }
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                }
            }
        },
        "userapi.FundingRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/funding.Data"
                }
            }
        },
        "userapi.FundingResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/userapi.FundingDataResponse"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                }
            }
        },
        "userapi.Relationship": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "entity_identifier": {
                    "type": "string"
                },
                "owner_identity": {
                    "type": "string"
                },
                "target_identity": {
                    "type": "string"
                }
            }
        },
        "userapi.ShareEntityRequest": {
            "type": "object",
            "properties": {
                "target_identity": {
                    "type": "string"
                }
            }
        },
        "userapi.ShareEntityResponse": {
            "type": "object",
            "properties": {
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                },
                "relationship": {
                    "type": "object",
                    "$ref": "#/definitions/userapi.Relationship"
                }
            }
        },
        "userapi.TransferDetailListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transferdetails.Data"
                    }
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                }
            }
        },
        "userapi.TransferDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/transferdetails.Data"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                }
            }
        },
        "userapi.UpdateTransferDetailRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/transferdetails.Data"
                },
                "document_id": {
                    "type": "string"
                },
                "transfer_id": {
                    "type": "string"
                }
            }
        },
        "v2.AddRole": {
            "type": "object",
            "properties": {
                "collaborators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key": {
                    "description": "Key is either hex encoded 32 byte ID or string label.\nString label is used as a preimage to sha256 for 32 byte hash.",
                    "type": "string"
                }
            }
        },
        "v2.CloneDocumentRequest": {
            "type": "object",
            "properties": {
                "scheme": {
                    "type": "string",
                    "enum": [
                        "generic",
                        "entity"
                    ]
                }
            }
        },
        "v2.CreateDocumentRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMapRequest"
                },
                "data": {
                    "type": "object"
                },
                "document_id": {
                    "description": "if provided, creates the next version of the document.",
                    "type": "string"
                },
                "read_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scheme": {
                    "type": "string",
                    "enum": [
                        "generic",
                        "entity"
                    ]
                },
                "write_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v2.RemoveCollaboratorsRequest": {
            "type": "object",
            "properties": {
                "collaborators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v2.Role": {
            "type": "object",
            "properties": {
                "collaborators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "v2.SignedAttributeRequest": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "integer",
                        "string",
                        "bytes",
                        "timestamp"
                    ]
                }
            }
        },
        "v2.TransitionRule": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "attribute_labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rule_id": {
                    "type": "string"
                },
                "target_attribute_label": {
                    "type": "string"
                },
                "wasm": {
                    "type": "string"
                }
            }
        },
        "v2.TransitionRules": {
            "type": "object",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.TransitionRule"
                    }
                }
            }
        },
        "v2.UpdateDocumentRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMapRequest"
                },
                "data": {
                    "type": "object"
                },
                "read_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scheme": {
                    "type": "string",
                    "enum": [
                        "generic",
                        "entity"
                    ]
                },
                "write_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v2.UpdateRole": {
            "type": "object",
            "properties": {
                "collaborators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}